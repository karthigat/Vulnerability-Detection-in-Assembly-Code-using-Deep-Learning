import glob
import re
import os
import pickle
import time

def main():
    """
    preprocess intel x86 non malicious assembly code
    """
    total_files = []
    path = os.path.join("path/non_malicious_wo_gcc")
    source_files = glob.glob(f'{path}/**/*.asm', recursive=True)
    whole_list = []
    start = time.time()
    for file in source_files:
        with open(file, "r", encoding="utf8") as file_lines:
            add_lines = []
            for lines in file_lines:
                command_lines=re.search(";", lines)
                colon_rmv = re.search(':', lines)
                if command_lines is not None:
                        lines = lines.split(";",1)
                        if len(lines) > 1:
                            lines.remove(lines[1])
                            lines = lines[0]
                if colon_rmv is not None:
                    lines = lines.split(":",1)                   
                    lines.remove(lines[0])
                    if len(lines) > 0:
                        lines = lines[0]
                    else:
                        lines = " "
                lines=re.sub(",", " ", lines)
                rmv =  lines.strip()
                add_lines.append(rmv)
            add_lines = list(filter(None, add_lines))
        whole_list.append(add_lines)
    time.sleep(1)
    end= time.time()
    pickle_path = "path/pickle_file_train_test"
    pickle_name = os.path.join(pickle_path, 'non_malicious_wo_gcc')
    file_pickle = os.path.join(pickle_name+'.pkl')
    open_file = open(file_pickle, "wb")
    pickle.dump(whole_list, open_file)
    open_file.close()


if __name__ == "__main__":
    main()